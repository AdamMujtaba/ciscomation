Overview
~~~~~~~~

Ciscomation is a script for pushing commands to cisco devices based on xml
file. It allows usage of multiprocessing, if maintenance description is
compatible.

Features
~~~~~~~~

Support special keywords in command lines.

    ============================= ==========================================
    -   --multiline-stop          stops --multiline-start mode and sends the
                                  buffered lines to the device then wait for 
                                  the prompt.

    -   --sleep-xx                Will sleep for xx seconds
    -   --multiline-start         start multiline input without waiting for
                                  prompt, as example you can use it to set 
                                  the banner. You have to use --multiline-stop
                                  if you are using --multiline-start.
    -   --pause                   After the execution of command block will 
                                  prompt you to go futher, or stop.
    -   --ignore-error            Will ignore any error generated by following
                                  command.
    -   --print-next              Will print the result of next command
    ============================= ==========================================


Under developpement features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

command result matching for command execution.

Usage
~~~~~

Install with pip.
Than you can run the command ciscomate directly

.. parsed-literal::

    ciscomate -h
    usage: ciscomate-script.py [-h] -i XML_FILE [--log-level LOG_LEVEL]
                               [--log-dir LOG_DIR] [--procnum PROCNUM]
    
    This script takes an XML input file reads the switches from it and plays 
    the commands specified Args that start with '--' (eg. -i) can also be set 
    in a config file (/etc/ciscomation.yml or ~/ciscomation.yml or 
    ./ciscomation.yml). The config file uses YAML syntax and must represent a 
    YAML 'mapping' (for details, see http://learn.getgrav.org/advanced/yaml). 
    If an arg is specified in more than one place, then commandline values 
    override config file values which override defaults.
    
    optional arguments:
      -h, --help            show this help message and exit
      -i XML_FILE, --xml-file XML_FILE
                            Name of the xml file containing maintenance
      --log-level LOG_LEVEL
                            Choose log level in debug, info, warning, error,
                            critical
      --log-dir LOG_DIR     Path of the directory to put the logfiles
      --procnum PROCNUM     Number of process if maintenance is compatible with
                            multi process.


Warnings
~~~~~~~~

Somme speical commands are not compatible with multiprocess:
    -   --print-next : Will print the result of next command
    -   --pause : After the execution of command block will prompt you to go 
        futher, or stop.

Because they are interactive.

.. note::
    Running a maintenance in multiprocess may lead to a disaster if you did not
    test it before.


Example
~~~~~~~

First create the maintenance description in an xml file

.. code:: XML

    <?xml version="1.0" encoding="UTF-8"?>
    <switches>
        <switch>
            <name>sw-1.mynet.net</name>
            <commands>
    show version
    --multiline-start
    show ip int brief
    show int desc
    --multiline-stop
    --sleep-5
            </commands>
        </switch>
        <switch>
            <name>sw-2.mynet.net</name>
            <commands>
    show version
    --multiline-start
    show ip int brief
    show int desc
    --multiline-stop
    --sleep-5
            </commands>
        </switch>
    </switches>
    *mnt.xml:*

Then play the script using ciscomate.py